"""
Migration tab component for data migration monitoring
Reads statistics from JSON files generated by CLI migration script
"""
import streamlit as st
import pandas as pd
import time
import subprocess
import os
import json
from pathlib import Path
from services.migration.stats_writer import StatsWriter
from services.migration.test_run_manager import TestRunManager


def render_migration_tab():
    """Render data migration tab with JSON-based monitoring"""
    st.header("🔄 데이터 마이그레이션")
    st.markdown("기존 입찰 데이터를 PostgreSQL 테이블에 마이그레이션합니다.")

    # Initialize stats reader
    stats_writer = StatsWriter()

    col1, col2 = st.columns([2, 1])

    with col1:
        st.subheader("📁 데이터 파일 현황")

        # 데이터 디렉토리 확인
        data_path = Path("data")
        if data_path.exists():
            json_files = [f for f in data_path.glob("*.json") if f.name != "sample_data.json"]

            if json_files:
                st.success(f"✅ {len(json_files)}개의 데이터 파일을 발견했습니다.")

                # 파일 목록 표시
                file_info = []
                total_size = 0

                for file_path in sorted(json_files):
                    size_mb = file_path.stat().st_size / (1024 * 1024)
                    total_size += size_mb

                    table_name = "Unknown"
                    if file_path.name.startswith("PubDataOpnStdService_ScsBidInfo_"):
                        table_name = "opn_std_scsbid_info"

                    file_info.append({
                        "파일명": file_path.name,
                        "크기 (MB)": f"{size_mb:.2f}",
                        "대상 테이블": table_name
                    })

                df_files = pd.DataFrame(file_info)
                st.dataframe(df_files)

                st.info(f"총 데이터 크기: {total_size:.2f} MB")

                # CLI 실행 안내
                st.markdown("---")
                st.subheader("🚀 마이그레이션 실행")

                st.markdown("""
                마이그레이션을 실행하려면 터미널에서 다음 명령어를 실행하세요:

                **기본 실행 (배치 1000개, 단일 커넥션):**
                ```bash
                python migrate_cli.py
                ```

                **배치 크기 변경 (100개):**
                ```bash
                python migrate_cli.py --batch-size 100
                ```

                **멀티 커넥션 (10개):**
                ```bash
                python migrate_cli.py --connections 10
                ```

                **배치 100개 + 커넥션 10개:**
                ```bash
                python migrate_cli.py --batch-size 100 --connections 10
                ```

                **옵션:**
                - `--batch-size`: 배치 크기 (100, 500, 1000, 2000, 5000)
                - `--connections`: 동시 커넥션 수 (1, 2, 5, 10)
                - `--output-dir`: 통계 저장 디렉토리
                """)

                # 간편 실행 버튼 (선택사항)
                if st.button("🚀 여기서 마이그레이션 시작 (백그라운드)"):
                    try:
                        # Start migration in background
                        venv_python = Path("venv/bin/python")
                        if venv_python.exists():
                            python_cmd = str(venv_python)
                        else:
                            python_cmd = "python"

                        process = subprocess.Popen(
                            [python_cmd, "migrate_cli.py"],
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            text=True
                        )
                        st.success(f"✅ 마이그레이션 프로세스 시작됨 (PID: {process.pid})")
                        st.info("📊 아래에서 실시간 진행 상황을 모니터링할 수 있습니다.")

                        # Store process info in session state
                        if 'migration_process' not in st.session_state:
                            st.session_state.migration_process = process

                    except Exception as e:
                        st.error(f"❌ 마이그레이션 시작 실패: {e}")

            else:
                st.warning("데이터 파일을 찾을 수 없습니다.")
        else:
            st.error("data 디렉토리를 찾을 수 없습니다.")

    with col2:
        st.subheader("📋 최근 테스트 실행")

        # Initialize test run manager
        test_manager = TestRunManager()

        # Get recent test runs
        recent_runs = test_manager.get_recent_test_runs(limit=5)

        if recent_runs:
            for run in recent_runs:
                status_icon = '✅' if run['status'] == 'completed' else ('🔄' if run['status'] == 'running' else '❌')
                timestamp = run['timestamp'][:19] if run.get('timestamp') else 'N/A'
                provider = run.get('cloud_provider', 'Unknown')
                instance = run.get('instance_type', 'Unknown')
                batch = run.get('batch_size', 0)
                conn = run.get('num_connections', 0)
                rps = run.get('average_records_per_second', 0)

                with st.expander(f"{status_icon} {timestamp} - {provider}"):
                    st.write(f"**Instance:** {instance}")
                    st.write(f"**Batch Size:** {batch}")
                    st.write(f"**Connections:** {conn}")
                    if run['status'] == 'completed':
                        st.write(f"**Throughput:** {rps:.1f} rec/s")
                        st.write(f"**Duration:** {run.get('total_duration_seconds', 0):.1f}s")
                    elif run['status'] == 'error':
                        st.error(f"Error: {run.get('error_message', 'Unknown error')}")
        else:
            st.info("아직 실행된 테스트가 없습니다.")

        # Auto-refresh button
        if st.button("🔄 상태 새로고침"):
            st.rerun()